

to launchURL browser,url,expectedValue
	set global browser to browser
	typetext windowskey,"r"
	
	typetext browser&&url,returnkey
	
	//waitfor 20, "logos"
	typetext windowsKey,upArrow
	assert that ImageFound(20,text:expectedValue)
end launchURL

to closeBrowser
	typetext controlkey,shiftkey,"w"
	wait 2
end closeBrowser

to closeTab expectation
	typetext controlkey,"w"
	if expectation is not empty
		navigate[],(expectation)
	end if 
end closeTab

to back expectation
	typetext altkey,leftarrow
	if expectation is not empty
		navigation[expectation,validation]
	end if 
	wait 3
end back

back "Laptops"


to scrollforImgorText toFind, SR
	// Images
	moveto the center of RemoteScreenRectangle()
	set the remoteWorkInterval to 0.1
	if file (suiteinfo().imagesFolder&"/"&toFind&".png") exists
		repeat until imagefound(0,image:toFind,searchRectangle:SR)
			ScrollWheelDown 5
			wait 1
			if repeatindex() > 10 then 
				logerror "Cannot find"&&toFind
				Exit repeat
			end if
		end repeat
	else
		repeat until imagefound(waitfor:0,text:toFind,caseSensitive:Yes,searchRectangle:SR)
			ScrollWheelDown 5
			wait 1
			if repeatindex() > 10 then 
				logerror "Cannot find"&&toFind
				Exit repeat
			end if
		end repeat
	end if
	log FoundImageLocation()
	return FoundImageLocation()
end scrollforImgorText

to navigation action,Validation
	click scrollforImgorText(action)
	wait 1
	if file (suiteinfo().imagesFolder&"/"&Validation&".png") exists
		log "imagefound"
		WaitFor 20, imagename:Validation
	else
		// OCR
		WaitFor 20, text:Validation,caseSensitive:Yes
		log "text found"
	end if
end navigation


to dropdown_typetext label,offset,input
	put ImageLocation(text:label) into labelLocation
	click labelLocation + offset
	wait 0.5
	typetext input,return
end dropdown_typetext



to handle textentry MyObject
	typetext controlKey,"a"
	typetext MyObject
end textentry

to textEntryOffset label,input, offset
	click text: label, hotspot: offset
	wait 0.5
	typetext controlkey,"a"
	typetext input
	wait 0.3
end textEntryOffset

to doubleClickTextEntry label,input, offset
	doubleclick text:label,hotspot: offset
	wait 0.5
	typetext input
	wait 0.3
end doubleClickTextEntry

to hiddenTextEntry label,input, offset
	click text:label,hotspot: offset
	wait 0.5
	typetext controlkey,"a"
	typehiddentext input
	wait 0.3
end hiddenTextEntry

to checkBox label, SR, offset:(config().dataEntry.checkBoxOffset)
	click the CenterLeft of scrollforImgorText(label, SR) + offset
	wait 0.5
end checkBox

to dropdown label,offset,input
	put ImageLocation(text:label) into labelLocation
	click labelLocation + offset
	wait 0.5
	typetext input,return
end dropdown

to selectDropDown label,offset,toSelect
	put imageLocation(text:label) into labelLocation
	click labelLocation+offset
	wait 0.5
	ClickEvent toSelect
end selectDropDown

to radioButtons label, offset
	put ImageLocation(text:label) into labelLocation
	click labelLocation + offset
	wait 0.5
end radioButtons

to searchTextEntry label,input, SR, offset
	click CenterLeft of scrollforImgorText(label, SR) + offset
	wait 0.5
	typetext controlkey,"a"
	typetext input
	wait 0.3
end searchTextEntry

to LaunchdDesktopApp path,app
	set global browser to app
	typetext windowskey,"r"
	typetext path,returnkey
	//waitfor 20, "logos"
	(*assert that ImageFound(20,image:logos,searchRectangle:(config().SUT.(global browser)))
	typetext windowskey, upArrow // maximize window on windows*)
end LaunchdDesktopApp 

to CloseApp
	//typetext controlkey,shiftkey,"w"
	typetext altkey, f4
	wait 2
end CloseApp

to DesktopAppSwitcher varlogos:logos,app:global browser
	set global app to app
	typetext altkey, tabkey
	assert that ImageFound(10,image:varlogos,searchRectangle:(config().SUT.(global browser)))
end DesktopAppSwitcher


to handle ClickEvent MyObject,ExpOutcome
	if file (suiteinfo().imagesFolder&"/"&MyObject&".png") exists then
		Click {image:MyObject,waitFor:2}
	else
		Click {text:MyObject,waitfor:20, IgnoreNewlines:"Yes", IgnoreSpaces:"Yes", TrimWhitespace:"Yes",caseSensitive:Yes}
	end if
	if ExpOutcome is not empty
		if file (suiteinfo().imagesFolder&"/"&ExpOutcome&".png") exists then
			waitfor 20, {image:ExpOutcome}
		else
			waitfor 80, {text:ExpOutcome,IgnoreNewlines:"Yes", IgnoreSpaces:"Yes", TrimWhitespace:"Yes"}
		end if
	end if
end ClickEvent


to handle movetoevent myObject
	moveto {text:myObject,waitfor:20}
end movetoevent

to handle verifyEvent verifyObject,successMsg,errorMsg
	if ImageFound(text:verifyObject, waitFor:30)
		Log successMsg
	else
		LogWarning errorMsg
	end if
end verifyEvent


to killApplicationOnSUT Application
	typetext windowsKey,r
	typetext "taskkill /im"&&Application&&"/t /f",return
end killApplicationOnSUT

to switchTabsInBrowser
	typetext controlKey,tabKey
end switchTabsInBrowser


function ScreenPart Portion
	// Set up an easy-to-maintain property list that stores the necessary multipliers for the specified screen portion parameter value
	set screenPortions to {
		TopHalf: ((0,0),(1,.5)),
		BottomHalf: ((0,.5),(1,1)),
		LeftHalf: ((0,0),(.5,1)),
		RightHalf: ((.5,0),(1,1)),
		HorizontalMiddle: ((0,.25),(1,.75)),
		VerticalMiddle:((.25,0),(.75,1)),
		TopLeftQuadrant:((0,0),(.5,.5)),
		TopRightQuadrant:((.5,0),(1,.5)),
		BottomLeftQuadrant:((0,.5),(.5,1)),
		BottomRightQuadrant:((.5,.5),(1,1)),
		Center:((.25,.25),(.75,.75)),
	}
	set multiplier to screenPortions.(Portion) // Retrieves the value for the key in the property list. The name of the key is passed as a parameter into the function.
	// Error handling is needed in the event that an unrecognized parameter is passed to the function
	if multiplier is empty then
		throw "Parameter error", Portion && "is not a recognized screen portion."
	end if
	return (the remoteScreenSize,the remotescreenSize) * multiplier
End ScreenPart



